{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red43\green50\blue61;\red255\green255\blue255;\red43\green50\blue61;
\red220\green79\blue125;\red242\green242\blue242;\red133\green190\blue253;\red22\green23\blue25;\red185\green188\blue186;
\red233\green233\blue233;\red209\green200\blue114;\red155\green255\blue78;\red255\green255\blue168;\red252\green81\blue252;
\red220\green79\blue125;\red242\green242\blue242;\red242\green84\blue89;\red105\green105\blue105;\red0\green0\blue0;
\red133\green190\blue253;\red185\green188\blue186;\red209\green200\blue114;\red233\green233\blue233;\red252\green81\blue252;
\red155\green255\blue78;}
{\*\expandedcolortbl;;\cssrgb\c22353\c25882\c30588;\cssrgb\c100000\c100000\c100000;\cssrgb\c22353\c25882\c30588;
\cssrgb\c89804\c40784\c56078;\cssrgb\c96078\c96078\c96078;\cssrgb\c58824\c79608\c99608;\cssrgb\c11373\c12157\c12941;\cssrgb\c77255\c78431\c77647;
\cssrgb\c92941\c92941\c92941;\cssrgb\c85490\c81569\c52157;\cssrgb\c65882\c100000\c37647;\cssrgb\c100000\c100000\c71373;\cssrgb\c100000\c45098\c99216;
\cssrgb\c89804\c40784\c56078;\cssrgb\c96078\c96078\c96078;\cssrgb\c96863\c42353\c42353;\cssrgb\c48627\c48627\c48627;\csgray\c0\c0;
\cssrgb\c58824\c79608\c99608;\cssrgb\c77255\c78431\c77647;\cssrgb\c85490\c81569\c52157;\cssrgb\c92941\c92941\c92941;\cssrgb\c100000\c45098\c99216;
\cssrgb\c65882\c100000\c37647;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\i \cf2 Test-Driven Development
\f0\i0 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Before writing code, we write a test.\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \
What am I trying to do? What should this code do?".\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 After writing the test, we write the _minimal code allowing the test to pass.\cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf2 \cb3 Having written the test first encourages you to write only the code strictly necessary to meet the initial need.\
Once the code has been written to pass the test, we can :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 refactor it, i.e. change its internal functioning, without changing the way it is called or the result it returns.\
\pard\tx566\pardeftab720\sl360\partightenfactor0
\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls4\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Think about an additional feature: we will then write a new test, then implement the feature. It is necessary that the new test and the previous one pass after the implementation.\'a0\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic Pasted Graphic.png \width12360 \height8860 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\qc\partightenfactor0

\fs48 \cf4 \cb3 \expnd0\expndtw0\kerning0
Assertion\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf0 \
\
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 An assertion is\'a0
\f1\i an expression
\f0\i0 \'a0that must be evaluated to true.\
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf2 an assertion verifies a certain prerequisite, used to verify that a value obtained (for example by calling a function with a certain parameter) conforms to an expected value.\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls5\ilvl0\cf2 `
\f2\b assert
\f0\b0 ' module, which comes standard with Node.js or 
\f2\b Chai library
\f0\b0 \cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs24 \cf5 \cb6 \strokec5 equal' method of the\'a0
\f0\fs32 \cf2 \cb3 \strokec2 assert'
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf7 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 const\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  assert \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 =\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 require\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'assert'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
assert.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 equal\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf13 \ul \ulc13 \strokec13 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 Math\cf9 \ulnone \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 .\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 max\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 1\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 , \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 5\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 , \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 9\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ), \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 9\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \shad0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0

\fs32 \cf4 \cb3 \expnd0\expndtw0\kerning0
First args : result and the second is the expected one\
\
When result diff 
\f3\fs24 \cf5 \cb6 \outl0\strokewidth0 \strokec5 assert.equal
\f0\fs32 \cf2 \cb3 \strokec2 \'a0produces an error.\'a0\

\f3\fs24 \cf5 \cb6 \strokec5 assert.equal
\f0\fs32 \cf2 \cb3 \strokec2 \'a0checks for equality of the values, but no 
\f1\i types
\f0\i0 .
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa320\partightenfactor0

\f3\fs28 \cf15 \cb16 	\'95	\expnd0\expndtw0\kerning0
assert.strictEqual
\f0\fs32 \cf2 \cb3 \outl0\strokewidth0 \strokec2 is used in the same way, but also checks that the types of the obtained and expected values are the same.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa320\partightenfactor0
\ls6\ilvl0
\f3\fs28 \cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 assert.notEqual
\f0\fs32 \cf2 \cb3 \strokec2 \'a0and\'a0
\f3\fs28 \cf5 \cb6 \strokec5 assert.notStrictEqual
\f0\fs32 \cf2 \cb3 \strokec2 \'a0check that the two values provided are\'a0
\f1\i not
\f0\i0 \'a0equal.\cb1 \uc0\u8232 \
\ls6\ilvl0
\f3\fs28 \cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 assert.deepEqual
\f0\fs32 \cf2 \cb3 \strokec2 \'a0and\'a0
\f3\fs28 \cf5 \cb6 \strokec5 assert.deepStrictEqual
\f0\fs32 \cf2 \cb3 \strokec2 \'a0check for equality of non-scalar values (objects, arrays).\cb1 \uc0\u8232 \
\ls6\ilvl0
\f3\fs28 \cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 assert.ok
\f0\fs32 \cf2 \cb3 \strokec2 \'a0waits for only one argument, contrary to the methods mentioned above, and checks that this argument is\'a0
\f1\i truthy
\f0\i0 , i.e. equivalent to the boolean\'a0
\f3\fs28 \cf5 \cb6 \strokec5 true
\f0\fs32 \cf2 \cb3 \strokec2 \'a0(non-zero number, non-empty string, any array or object even empty).
\f2\b\fs44 \cf17 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\pardeftab720\sl500\sa440\partightenfactor0
\cf17 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17 \
\pard\pardeftab720\sl360\partightenfactor0
\ls7\ilvl0
\fs32 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 TDD & Fonction
\f0\b0 \
\pard\tx566\pardeftab720\sl360\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0
\ls8\ilvl0\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Before writing the function, we think about the way it must behave\
\pard\tx566\pardeftab720\sl360\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa320\partightenfactor0
\ls9\ilvl0
\f3\fs28 \cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 capitalizeFirst
\f0\fs32 \cf2 \cb3 \strokec2 \'a0must be a function (it seems obvious, but we can test it anyway),\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 it must accept only one argument,\cb1 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 it must transform the first letter of the string into a capital letter, but leave the rest unchanged, and return the result.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl320\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls10\ilvl0
\fs32 \cf2 \cb3 {\listtext	1.	}write \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Test that fails\
\pard\tx566\pardeftab720\sl360\partightenfactor0
\cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\fs26 \cf18 \cb19 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // capitalizeFirst.js\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 const\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  assert \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 =\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 require\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'assert'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // WRITE THE ACTUAL FUNCTION HERE\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
\cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // Check that capitalizeFirst is a function\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
assert.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 strictEqual\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 typeof\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  capitalizeFirst, \cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'function'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // Check that capitalizeFirst accepts one argument\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
assert.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 strictEqual\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (capitalizeFirst.length, \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 1\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // Check that capitalizeFirst transforms javaScript correctly\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
assert.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 strictEqual\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'javaScript'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ), \cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'JavaScript'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // Check that it works for a 1-character string\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
assert.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 strictEqual\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'z'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ), \cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 'Z'\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\cf18 \strokec18 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 // Check that it works for an empty string\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
assert.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 strictEqual\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ''\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ), \cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ''\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 );\
\pard\tx566\pardeftab720\sl360\partightenfactor0

\fs32 \cf2 \cb3 \strokec2 \shad0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls11\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 2. write \expnd0\expndtw0\kerning0
Test that fails
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The test describes the expected behaviour of the code.\

\fs26 \cb19 We don't worry about optimising the code yet: that will come later.\
\
\pard\pardeftab720\sl480\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 function\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (input) \{\
  \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 let\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  output \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 =\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ''\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ;  \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 for\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  (\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 let\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  i \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 =\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  ; i \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 <\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input.length ; i\cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ++\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ) \{\
    \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 if\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  (i \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ===\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ) \{\
      output \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 +=\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input[\cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ].\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 toUpperCase\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ();\
    \} \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 else\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \{\
      output \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 +=\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input[i];\
    \}\
  \}\
  \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 return\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  output;\
\}\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \strokec2 \shad0 \

\fs32 \cb3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 3. Refactoring\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \
rewriting code, for example to make it more maintainable, or to improve its performance.\
Must behave identically to the initial code: after refactoring, tests must therefore always pass.\
\
\pard\pardeftab720\sl480\partightenfactor0

\fs26 \cf7 \cb19 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 function\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (input) \{\
  \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 return\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input[\cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ].\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 toUpperCase\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 () \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 +\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 slice\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 1\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ); //
\fs32 \cf2 \cb3 \strokec2 \shad0  error - value at index 0 empty string is\'a0
\f3\fs24 \cf5 \cb6 \strokec5 undefined
\f0\fs26 \cf9 \cb19 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
\}\
\
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf2 \cb3 \strokec2 \shad0 version takes into account limit case, returning an empty string if input string is empty
\fs26 \cf9 \cb19 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
\pard\pardeftab720\sl480\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 function\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (input) \{\
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 return\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input.length \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 >\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
    \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ?\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input[\cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ].\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 toUpperCase\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 () \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 +\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input.\cf11 \strokec11 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 slice\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (\cf14 \strokec14 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 1\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 )\
    \cf10 \strokec10 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 :\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf12 \strokec12 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ''\cf9 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ;\
\}\
\
\pard\pardeftab720\sl480\partightenfactor0
\cf20 \cb19 \outl0\strokewidth0 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 function\cf21 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf22 \cb19 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 capitalizeFirst\cf21 \cb19 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 (input) \{\
\cf20 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 return\cf21 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  input.length \cf23 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 >\cf21 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf24 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 0 ?\
\cf9 \cb19 \outl0\strokewidth0 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 input.forEach(element => element. \cf22 \cb19 \outl0\strokewidth0 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 toUpperCase()\cf21 \cb19 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf23 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 :\cf21 \shad\shadx0\shady-20\shadr0\shado76 \shadc0  \cf25 \cb19 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ''\cf21 \cb19 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 ;\
\}\cf9 \cb19 \outl0\strokewidth0 \strokec9 \shad\shadx0\shady-20\shadr0\shado76 \shadc0 \
\pard\pardeftab720\sl480\partightenfactor0
\cf9 \
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf2 \cb3 \strokec2 \shad0 \
\
\
\

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}